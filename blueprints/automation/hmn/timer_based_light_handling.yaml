blueprint:
  name: Timer based light handling
  description: Set brightness and temperature on lights based on light level sensor.
  domain: automation
  source_url: https://github.com/hmn/home-assistant-config/blob/master/blueprints/automation/hmn/light_brightness_and_temperature.yaml
  input:
    timer_entity:
      name: Timer
      description: Timer entity to use for the automation.
      selector:
        entity:
          domain: timer
    target_lights:
      name: Light
      description: The lights to be controlled
      selector:
        target:
          entity:
            domain: light
    illuminance_sensor:
      name: Lux/Brightness Sensor
      description: The sensor that measures the light level
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_cutoff:
      name: Illuminance threshold
      description: The threshold to compare to the current illumination (lux above this value will NOT turn on the light).
      default: 75
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: lx
    light_statistics:
      name: Light statistics sensor
      description: The light statistics sensor used for illuminance cutoff.
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    home_helper:
      name: Home helper
      description: Used to help define when to turn on lights
      default: input_boolean.home
      selector:
        entity:
          domain: input_boolean
    sleep_helper:
      name: Sleep helper
      description: Used to help define when not to turn on lights
      default: input_boolean.sleep
      selector:
        entity:
          domain: input_boolean
    min_color_temp:
      name: Minimum Color Temperature
      description:  The coolest color your bulbs will be set to
      default: 250
      selector:
        color_temp:
          #min_mireds: 153
          #max_mireds: 500
    max_color_temp:
      name: Maximum Color Temperature
      description:  The warmest color your bulbs will be set to
      default: 454
      selector:
        color_temp:
          #min_mireds: 153
          #max_mireds: 500
    # min_brightness:
    #   name: Minimum Brightness
    #   description: Minimum brightness of the light(s)
    #   default: 1
    #   selector:
    #     number:
    #       min: 0.0
    #       max: 100.0
    #       mode: slider
    #       step: 1.0
    #       unit_of_measurement: "%"
    max_brightness:
      name: Maximum Brightness
      description: Maximum brightness of the light(s)
      default: 100
      selector:
        number:
          min: 0.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: "%"
    transition:
      name: Transition
      description: Transition time (s)
      default: 5
      selector:
        number:
          min: 0.0
          max: 30.0
          mode: slider
          step: 1.0
          unit_of_measurement: "s"

mode: queued

variables:
  #light_list: !input target_lights
  #on_lights: >
  #  {{ expand(light_list) | selectattr('state', 'eq', 'on') | map(attribute='entity_id')  | list }}
  #target_on_lights: >-
  #  {{states.light 
  #  | selectattr('state','eq','on') 
  #  | map(attribute='entity_id') | select("in",target_lights) | list }}
  min_color_temp: !input min_color_temp
  max_color_temp: !input max_color_temp
  #min_brightness: !input "min_brightness"
  max_brightness: !input "max_brightness"
  color_temp: >-
    {{ [([((1000000/(4791.67 - 3290.66/(1 + 0.222 * ([([0,state_attr('sun.sun','elevation')]|max),90]|min**0.81))))|int),min_color_temp]|max),max_color_temp]|min}}
  brightness_entity: !input illuminance_sensor
  # brightness_pct: >-
  #  {%- set livingroombrightness = ((20 * states(brightness_entity) | float) + 308.6 )| round(0) | int %}
  #  {%- if livingroombrightness > 100 %}
  #  {%- set livingroombrightness = 100 %}
  #  {%- endif %}
  #  {{ livingroombrightness }}
  # pct: >
  #   {% if (states('sun.sun') == 'below_horizon') %}
  #     {% set sunset = as_timestamp(states.sun.sun.attributes.next_setting)|float - 86400 %}
  #     {% set sunrise = as_timestamp(states.sun.sun.attributes.next_rising)|float %}
  #   {% else %}
  #     {% set sunset = as_timestamp(states.sun.sun.attributes.next_setting)|float %}
  #     {% set sunrise = as_timestamp(states.sun.sun.attributes.next_rising)|float %}
  #   {% endif %}
  #   {% set midpoint = (sunset |float + sunrise |float) / 2 + (midnight_offset|float * 60) | float %}
  #   {{ sin(((as_timestamp(now())|float - midpoint)/86400)*pi) |abs }}
  # brightness_percent: "{{ (min_brightness|int+(max_brightness|int-min_brightness|int) * pct) | int }}"
  brightness: >-
    {%- set lux = states(brightness_entity) | int -%}
    {%- set perc = (14000 - lux) / (14000 / 100) | int -%}
    {%- set bri = ((max_brightness * perc) / 100) | int -%}
    {{ bri }}

trigger:
  - platform: event
    event_type: timer.started
    event_data:
      entity_id: !input timer_entity
  - platform: event
    event_type: timer.restarted
    event_data:
      entity_id: !input timer_entity

condition:
  - condition: state
    entity_id: !input sleep_helper
    state: "off"
  - condition: state
    entity_id: !input home_helper
    state: "on"
  - condition: numeric_state
    entity_id: !input light_statistics
    below: !input illuminance_cutoff

action:
  - service: light.turn_on
    data:
      color_temp: "{{ color_temp }}"
      brightness_pct: "{{ brightness|int }}"
      transition: !input transition
    target: !input target_lights
  # - delay:
  #     hours: 0
  #     minutes: 0
  #     seconds: 0
  #     milliseconds: 500
  # - service: light.turn_on
  #   data:
  #     brightness_pct: "{{ brightness|int }}"
  #     transition: !input transition
  #   target: !input target_lights
